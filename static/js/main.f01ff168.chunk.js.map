{"version":3,"sources":["constants/routes.js","components/Button.js","views/useState/useState.js","constants/content.js","components/Viewer.js","views/useState/index.js","components/Person.js","views/useEffect/useEffect.js","services/api.js","views/useEffect/index.js","Router.js","serviceWorker.js","index.js"],"names":["links","to","label","paths","HOME","USE_STATE","USE_EFFECT","Button","props","onClick","className","children","btnProps","btnClassName","trim","defaultProps","UseState","useState","counter","setCounter","Viewer","language","style","tomorrow","content","path","UseStateComponent","routes","Person","src","profileImage","alt","firstName","lastName","email","UseEffect","data","setData","page","setPage","loading","setLoading","useEffect","fetch","then","res","json","api","length","map","item","i","key","UseEffectComponent","Router","basename","route","index","activeClassName","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f01ff168.chunk.js","sourcesContent":["export default {\n  links: [\n    { to: '/', label: 'Home' },\n    { to: '/use-state', label: 'useState' },\n    { to: '/use-effect', label: 'useEffect' },\n  ],\n  paths: {\n    HOME: '/',\n    USE_STATE: '/use-state',\n    USE_EFFECT: '/use-effect',\n  },\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Button(props) {\n  const {onClick, className, children, ...btnProps} = props;\n  const btnClassName = `btn ${className}`.trim();\n\n  return (\n    <button onClick={onClick} className={btnClassName} {...btnProps}>\n      {children}\n    </button>\n  );\n}\n\nButton.propTypes = {\n  className: PropTypes.string,\n  onClick: PropTypes.func.isRequired,\n};\n\nButton.defaultProps = {\n  className: '',\n};\n\nexport default Button;\n","import React, { useState } from 'react';\n\nimport Button from 'components/Button';\n\nfunction UseState() {\n  const [counter, setCounter] = useState(0);\n\n  return (\n    <div className=\"p-4\">\n      <p className=\"mb-4\">\n        Counter: <strong>{counter}</strong>\n      </p>\n      <div>\n        <Button onClick={() => setCounter(counter - 1)}>Decrease</Button>\n        <Button onClick={() => setCounter(counter + 1)}>Increase</Button>\n        <Button onClick={() => setCounter(0)}>Reset</Button>\n      </div>\n    </div>\n  );\n}\n\nexport default UseState;\n","export default {\n  '/use-effect': `import React, { useState, useEffect } from 'react';\n\nimport * as api from 'services/api';\nimport Button from 'components/Button';\nimport Person from 'components/Person';\n\nfunction UseEffect() {\n  const [data, setData] = useState([]);\n  const [page, setPage] = useState(1);\n  const [loading, setLoading] = useState(false);\n\n  function fetchPrevious() {\n    if (page === 1) return;\n\n    setPage(page - 1);\n  }\n\n  function fetchNext() {\n    setPage(page + 1);\n  }\n\n  useEffect(() => {\n    setLoading(true);\n\n    api.fetchUsers(page).then(res => {\n      setLoading(false);\n\n      if (res.length === 0) {\n        setPage(page - 1);\n        return;\n      }\n      setData(res);\n    });\n  }, [page]);\n\n  return (\n    <div className=\"p-4\">\n      {data && data.length > 0 && (\n        <ul className=\"border mb-4\">\n          {data.map((item, i) => (\n            <Person key={i} {...item} />\n          ))}\n        </ul>\n      )}\n      <div>\n        <Button onClick={fetchPrevious}>Previous</Button>\n        Page:\n        <strong>\n          <span className=\"mr-2 ml-1\">{page}</span>\n        </strong>\n        <Button onClick={fetchNext}>Next</Button>\n        {loading && <span>Loading...</span>}\n      </div>\n    </div>\n  );\n}\n\nexport default UseEffect;\n\n`,\n  '/use-state': `import React, { useState } from 'react';\n\nimport Button from 'components/Button';\n\nfunction UseState() {\n  const [counter, setCounter] = useState(0);\n\n  return (\n    <div className=\"p-4\">\n      <p className=\"mb-4\">\n        Counter: <strong>{counter}</strong>\n      </p>\n      <div>\n        <Button onClick={() => setCounter(counter - 1)}>Decrease</Button>\n        <Button onClick={() => setCounter(counter + 1)}>Increase</Button>\n        <Button onClick={() => setCounter(0)}>Reset</Button>\n      </div>\n    </div>\n  );\n}\n\nexport default UseState;\n`,\n};\n","import React from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { tomorrow } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nimport content from 'constants/content';\n\nfunction Viewer(props) {\n  return (\n    <div className=\"lg:clearfix\">\n      <div className=\"lg:w-1/2 lg:float-left lg:h-screen border-r\">\n      <SyntaxHighlighter language=\"jsx\" style={tomorrow} className=\"syntax-highlighter h-full\">\n        {content[props.path]}\n      </SyntaxHighlighter>\n      </div>\n      <div className=\"lg:w-1/2 lg:float-left lg:h-screen bg-white overflow-auto\">{props.children}</div>\n    </div>\n  );\n}\n\nexport default Viewer;\n","import React from 'react';\n\nimport UseState from './useState';\nimport routes from 'constants/routes';\nimport Viewer from 'components/Viewer';\n\nfunction UseStateComponent() {\n  return (\n    <Viewer path={routes.paths.USE_STATE}>\n      <UseState />\n    </Viewer>\n  );\n}\n\nexport default UseStateComponent;\n","import React from 'react';\n\nfunction Person(props) {\n  return (\n    <li className=\"flex items-center border-b\">\n      <img src={props.profileImage} alt={props.firstName} className=\"rounded-full border-2 border-blue-600 w-12 m-2\" />\n      <p className=\"text-gray-800 font-medium\">{props.firstName} {props.lastName} <span className=\"font-normal\">({props.email})</span></p>\n    </li>\n  );\n}\n\nexport default Person;\n","import React, { useState, useEffect } from 'react';\n\nimport * as api from 'services/api';\nimport Button from 'components/Button';\nimport Person from 'components/Person';\n\nfunction UseEffect() {\n  const [data, setData] = useState([]);\n  const [page, setPage] = useState(1);\n  const [loading, setLoading] = useState(false);\n\n  function fetchPrevious() {\n    if (page === 1) return;\n\n    setPage(page - 1);\n  }\n\n  function fetchNext() {\n    setPage(page + 1);\n  }\n\n  useEffect(() => {\n    setLoading(true);\n\n    api.fetchUsers(page).then(res => {\n      setLoading(false);\n\n      if (res.length === 0) {\n        setPage(page - 1);\n        return;\n      }\n      setData(res);\n    });\n  }, [page]);\n\n  return (\n    <div className=\"p-4\">\n      {data && data.length > 0 && (\n        <ul className=\"border mb-4\">\n          {data.map((item, i) => (\n            <Person key={i} {...item} />\n          ))}\n        </ul>\n      )}\n      <div>\n        <Button onClick={fetchPrevious}>Previous</Button>\n        Page:\n        <strong>\n          <span className=\"mr-2 ml-1\">{page}</span>\n        </strong>\n        <Button onClick={fetchNext}>Next</Button>\n        {loading && <span>Loading...</span>}\n      </div>\n    </div>\n  );\n}\n\nexport default UseEffect;\n","export function fetchUsers(page = 1) {\n  return fetch(\n    `https://mock-io.herokuapp.com/users?_page=${page}&_limit=10`\n  ).then(res => res.json());\n}\n","import React from 'react';\n\nimport UseEffect from './useEffect';\nimport routes from 'constants/routes';\nimport Viewer from 'components/Viewer';\n\nfunction UseEffectComponent() {\n  return (\n    <Viewer path={routes.paths.USE_EFFECT}>\n      <UseEffect />\n    </Viewer>\n  );\n}\n\nexport default UseEffectComponent;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route, NavLink } from 'react-router-dom';\n\nimport routes from 'constants/routes';\nimport UseState from 'views/useState';\nimport UseEffect from 'views/useEffect';\n\nfunction Router() {\n  return (\n    <BrowserRouter basename=\"/learning-hooks\">\n      <div className=\"flex bg-gray-100\">\n        <div className=\"w-1/6 border-r border-gray-300 h-screen\">\n          <nav>\n            <ul>\n              {routes.links.map((route, index) => (\n                <li key={index}>\n                  <NavLink\n                    to={route.to}\n                    className=\"block p-4 hover:bg-gray-300 font-medium text-gray-700\"\n                    activeClassName=\"bg-gray-400\"\n                    exact\n                  >\n                    {route.label}\n                  </NavLink>\n                </li>\n              ))}\n            </ul>\n          </nav>\n        </div>\n        <div className=\"w-5/6\">\n          <Switch>\n            <Route path={routes.paths.USE_STATE}>\n              <UseState />\n            </Route>\n            <Route path={routes.paths.USE_EFFECT}>\n              <UseEffect />\n            </Route>\n            <Route path={routes.paths.HOME}>\n              <div>Home</div>\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default Router;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Router from 'Router';\nimport * as serviceWorker from './serviceWorker';\n\nimport './styles/tailwind.css';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}